# Generated by Django 3.2.12 on 2023-11-27 09:56
import logging

import json
from django.db import migrations
from paas_wl.workloads.autoscaling.entities import AutoscalingConfig

logger = logging.getLogger(__name__)


def fix_invalid_scaling_config_data(apps, schema_editor):
    """修复 PorcessSpec.scaling_config 为空时, 由历史代码写入数据库的不规范数据
    已知的脏数据有: 空字符串 '' 和 空字典 '{}'
    """

    ProcessSpec = apps.get_model("processes", "ProcessSpec")
    qs = (
        ProcessSpec.objects.using(schema_editor.connection.alias)
        .all()
        .extra({"raw_scaling_config": "scaling_config"})
        .values("id", "raw_scaling_config")
    ).iterator()

    for item in qs:
        try:
            _ = AutoscalingConfig(**json.loads(item["raw_scaling_config"]))
        except (json.JSONDecodeError, TypeError):
            logger.warning(
                "scaling_config(%s) of obj<%s> is invalid, set it to None",
                item["raw_scaling_config"],
                item["id"],
            )
            ProcessSpec.objects.using(schema_editor.connection.alias).filter(id=item["id"]).update(scaling_config=None)


class Migration(migrations.Migration):

    dependencies = [
        ("processes", "0006_alter_processspec_scaling_config"),
    ]

    operations = [
        migrations.RunPython(fix_invalid_scaling_config_data),
    ]
