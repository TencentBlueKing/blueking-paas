import datetime

from django.db import models
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from paasng.utils.models import AuditedModel
from paasng.utils.text import generate_token


class SysAPIClient(AuditedModel):
    """A system API Client for calling system APIs.
    Supported authentication methods:

    - Authenticated App: an app authenticated by the API Gateway.
    - Private Token(deprecated): a token generated by the system.
    """

    name = models.CharField(
        max_length=150,
        unique=True,
        error_messages={
            "unique": _("A client with that name already exists."),
        },
    )
    role = models.IntegerField(
        help_text=_("The role of this client, it determines the permissions."),
    )
    is_active = models.BooleanField(
        default=True,
        help_text=_("Whether this client is active, if not, it can not be used to call system APIs."),
    )

    def natural_key(self):
        return (self.name,)


class ClientPrivateTokenManager(models.Manager):
    """Custom manager for ClientPrivateToken."""

    def create_token(self, client: SysAPIClient, expires_in: int | None) -> "ClientPrivateToken":
        """Create a random private token for the client

        :param expires_in: after how many seconds, this token will be marked expired, None means
            never expires.
        """
        token = generate_token(length=30)
        expires_at = None
        if expires_in:
            expires_at = timezone.now() + datetime.timedelta(seconds=expires_in)
        return self.create(client=client, token=token, expires_at=expires_at)

    def get_by_natural_key(self, name: str, token: str, **kwargs):
        return self.get(client=SysAPIClient.objects.get(name=name))


class ClientPrivateToken(models.Model):
    """Private tokens can be used to authenticate a client. These tokens typically
    have an expiration period lasting several months.
    """

    client = models.ForeignKey(SysAPIClient, on_delete=models.CASCADE, db_constraint=False)
    token = models.CharField(max_length=64, unique=True)
    expires_at = models.DateTimeField(null=True, blank=True)
    is_active = models.BooleanField(default=True, help_text=_("Whether this token is active."))

    objects = ClientPrivateTokenManager()

    def natural_key(self):
        return (self.user, self.token)

    def has_expired(self):
        """Check if the token has been expired."""
        if not self.is_active:
            return True

        # empty "expires_at" field means this token will never expire
        if not self.expires_at:
            return False
        return timezone.now() > self.expires_at


class AuthenticatedAppAsClientManager(models.Manager):
    def get_by_natural_key(self, bk_app_code: str):
        return self.get(bk_app_code=bk_app_code)


class AuthenticatedAppAsClient(AuditedModel):
    """Store relationships which treat an authenticated(by API Gateway) app as an system client,
    useful for calling system APIs without providing any real client credentials"""

    client = models.ForeignKey(SysAPIClient, on_delete=models.CASCADE, db_constraint=False)
    bk_app_code = models.CharField(max_length=64, unique=True)

    objects = AuthenticatedAppAsClientManager()

    def natural_key(self):
        return (self.bk_app_code,)
